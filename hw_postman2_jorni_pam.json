{
	"info": {
		"_postman_id": "30585c04-4132-4e28-be99-c7bf10022275",
		"name": "hw_postman2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first responce",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () { //проверить статус код 200\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json(); // спарсить response bode в json\r",
							"\r",
							"pm.test(\"testName\", function () { // Проверить, что name в ответе равно name s request\r",
							"    pm.expect(jsonData.name).to.eql(\"Jorni\");\r",
							"});\r",
							"\r",
							"pm.test(\"testAge\", function () { // Проверить, что age в ответе равно age s request\r",
							"    pm.expect(jsonData.age).to.eql(\"27\");\r",
							"});\r",
							"\r",
							"pm.test(\"testSalary\", function () { // Проверить, что salary в ответе равно salary s request\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"let req =request.data; // Спарсить request.\r",
							"// console.log(\"req = \", req ); \r",
							"// console.log(\"typofReq = \", typeof req);\r",
							"\r",
							"pm.test(\"checkName\", function () { // Проверить, что name в ответе равно name s request\r",
							"    pm.expect(req.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"pm.test(\"checkAge\", function () { // Проверить, что age в ответе равно age s request\r",
							"    pm.expect(req.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"pm.test(\"checkSalary\", function () { // Проверить, что salary в ответе равно salary s request\r",
							"    pm.expect(Number(req.salary)).to.equal(jsonData.salary);\r",
							"});\r",
							"\r",
							"console.log(jsonData.family) // Вывести в консоль параметр family из response.\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1_5 = req.salary*4\r",
							"console.log(req_salary_1_5)\r",
							"\r",
							"pm.test(\"check_Salary_1_5_year\", function () { \r",
							"    pm.expect(req_salary_1_5).to.equal(jsonData.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Jorni",
							"type": "default"
						},
						{
							"key": "age",
							"value": "27",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "\"/s34lfgbj/Jorni/jjd909/86482kjkWpqc11801234qwer295478evny\"",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Jorni/jjd909/92933kjkWpqc23451234qwer120evny",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Jorni",
							"type": "default"
						},
						{
							"key": "password",
							"value": "1234qwer",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос\r",
							"// 2.статус код 200\r",
							"pm.test(\"Status code is 200\", function () { \r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3.спарсить response body в json\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"// 4.спарсить request\r",
							" let req =pm.request.url.query.all() \r",
							"//  console.log(typeof req, req)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function () { \r",
							"    pm.expect(req[0].value).to.eql(jsonData.name);\r",
							"});\r",
							"// pm.test(\"check name1\", function () { \r",
							"//     let reqName =pm.request.url.query.get(\"name\")\r",
							"//     pm.expect(reqName).to.eql(jsonData.name);\r",
							"// });\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age\", function () { \r",
							"    pm.expect(req[1].value).to.eql(jsonData.age);\r",
							"    });\r",
							"// pm.test(\"check age1\", function () { \r",
							"//     let reqAge =pm.request.url.query.get(\"age\")\r",
							"//     pm.expect(reqAge).to.eql(jsonData.age);\r",
							"// });\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary\", function () { \r",
							"    pm.expect(Number(req[2].value)).to.eql(jsonData.salary);\r",
							"    });\r",
							"// pm.test(\"check salary1\", function () { \r",
							"//     let reqSalary =Number(pm.request.url.query.get(\"salary\"))\r",
							"//     pm.expect(reqSalary).to.eql(jsonData.salary);\r",
							"// });\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"property name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"property age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.include(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Jorni&age=27&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Jorni"
						},
						{
							"key": "age",
							"value": "27"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							" let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req =pm.request.url.query.all();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name\", function () { \r",
							"    pm.expect(req[0].value).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check age\", function () { \r",
							"    pm.expect(Number(req[1].value)).to.eql(jsonData.age);\r",
							"    });\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"let req_salary = req[2].value;\r",
							"console.log(\"req_salary =\", req_salary);\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = jsonData.salary;\r",
							"console.log(\"resp_salary =\", resp_salary);\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let resp_salary0 = jsonData.salary[0];\r",
							"console.log(\"resp_salary0 =\", resp_salary0);\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let resp_salary1 = jsonData.salary[1];\r",
							"console.log(\"resp_salary1 =\", resp_salary1);\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let resp_salary2 = jsonData.salary[2];\r",
							"console.log(\"resp_salary2 =\", resp_salary2);\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary0 = req_salary\", function () {\r",
							"    pm.expect(Number(req_salary)).to.eql(resp_salary0);\r",
							"});\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary1 = req_salary *2\", function () {\r",
							"    let req_salary2 = req_salary*2\r",
							"    pm.expect(req_salary2).to.eql(Number(resp_salary1));\r",
							"});\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"resp_salary2 = req_salary *3\", function () {\r",
							"    let req_salary3 = req_salary *3\r",
							"    pm.expect(req_salary3).to.eql(Number(resp_salary2));\r",
							"});\r",
							"// 15. Создать в окружении переменную name : create \"Environmen for hw_postman2\"\r",
							"// 16. Создать в окружении переменную age : create \"Environmen for hw_postman2\"\r",
							"// 17. Создать в окружении переменную salary : create \"Environmen for hw_postman2\"\r",
							"// 18. Передать в окружение переменную name : {{name}}\r",
							"// 19. Передать в окружение переменную age : {{age}}\r",
							"// 20. Передать в окружение переменную salary : {{salary}}\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(element => console.log(element));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}