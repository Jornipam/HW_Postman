{
	"info": {
		"_postman_id": "995e6d96-c9fa-4e51-98a6-5d136fd9e8a1",
		"name": "hw_postman2_Anatoly",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1**** проверка на валидность name, age, salary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let req =request.data; //парсим запрос \r",
							"console.log(typeof req, req)\r",
							"\r",
							"let name = req.name\r",
							"let age = +req.age\r",
							"let salary = +req.salary\r",
							"\r",
							"function chackName(name) { \r",
							"    if (name && name.length >= 3 && name.length <= 40 && name.trim() == name ){ // функция проверяет поле name на валидность требованиям\r",
							"        return true\r",
							"    }\r",
							"}\r",
							"chackName (name)\r",
							"\r",
							"function chackAge(age) {\r",
							"    if (age && age >= 18 && age <= 120 && Number.isInteger(age) && !isNaN(age)){ //функция проверяет поле age на валидность требованиям\r",
							"        return true\r",
							"    }\r",
							"} \r",
							"chackAge (age)\r",
							" \r",
							"function chackSalary(salary) {\r",
							" if (salary && salary >= 1 && salary <= 1000000 && Number.isInteger(salary) && !isNaN(salary) ){ //функция проверяет поле salary на валидность требованиям\r",
							"     return true\r",
							"    }\r",
							"}\r",
							"chackSalary (salary);\r",
							"if (chackName(name) && chackAge(age) && chackSalary(salary)) {\r",
							"    pm.test(`name: ${req.name}, age: ${req.age}, salary: ${req.salary}, Status code is 200`, function () { // если все три функции true\r",
							"     pm.response.to.have.status(200); \r",
							"     });\r",
							"    }\r",
							"    else {\r",
							"     pm.test(`name: ${req.name}, age: ${req.age}, salary: ${req.salary}, Status code is NOT 200`, function () { // если хоть одна функция false\r",
							"     pm.response.to.not.have.status(200); \r",
							"     });\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}:{{port}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "2* цикл проверки равенства req_salary & resp_salary",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Проверить, что 0-й,1-й,2-й элемент параметра salary равен salary/salary*2/salary*3 из request (salary забрать из request.)\r",
							"// * Преобразовать пункты 12-13-14 (salary из реквеста и респонса равны) таким образом, чтобы проверка производилась циклом, в котором будет всего ОДИН тест. Имя теста должно меняться в зависимости от значения в Salary\r",
							"let req_salary = pm.request.url.query.get('salary');\r",
							"let resp_salary = pm.response.json().salary\r",
							"\r",
							"resp_salary.forEach((element, index) => {\r",
							"pm.test(`response salary: ${element} equal request salary: ${req_salary}*${index+1}`,function() {\r",
							"    pm.expect(+req_salary*(index+1)).to.eql(+element)\r",
							"})\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=lola&age=100&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "lola"
						},
						{
							"key": "age",
							"value": "100"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3* проверка равенства req == resp/ глубокое сравнение обьектов",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5-7 Проверить, что name/age/salary в ответе равно name/age/salary s request (name/age/salary забрать из request.)\r",
							"// Преобразовать задания 5-7 (сравнить идентичные поля в реквесте и респонсе) таким образом, чтобы это делалось ЗА ОДИН ТЕСТ (сразу все 3 поля) БЕЗ ЦИКЛОВ! (глубокое сравнение объектов)\r",
							"let req_name = pm.request.url.query.get('name') //парсим запрос\r",
							"let req_age = +pm.request.url.query.get('age')\r",
							"let req_salary = +pm.request.url.query.get('salary')\r",
							"const obj_req = {name: req_name, age: req_age, salary: req_salary} //помещаем спарсенные данные реквеста в объект {ключ: значение}\r",
							"\r",
							"let resp_name = pm.response.json().name //парсим ответ\r",
							"let resp_age = +pm.response.json().age\r",
							"let resp_salary = +pm.response.json().salary\r",
							"const obj_resp = {name: resp_name, age: req_age, salary: resp_salary} // помещаем спарсенные данные респонза в объект {ключ: значение}\r",
							"\r",
							"pm.test(`request == response`,function(){\r",
							"    pm.expect(obj_req.key).to.deep.equal(obj_resp.key) // глубокое сравнение обьектов по ключу\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:{{port}}/object_info_3?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{url}}"
					],
					"port": "{{port}}",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4*",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"let arr = []\r",
							"for (const[key] in pm.response.json()){\r",
							"    arr.push(key)\r",
							"}\r",
							"arr.forEach((e)=> {\r",
							"    pm.test(`response has a ${e}`,function(){\r",
							"        pm.expect(pm.response.json()).to.have.property(e)\r",
							"    })\r",
							"})\r",
							"\r",
							"const count = ['',3.3, 2.7, 3.8, 2, 1]\r",
							"const resp = pm.response.json()\r",
							"arr.forEach((e, i)=> {\r",
							"    if (e != 'person')\r",
							"    pm.test(`response has a ${e}`,function(){\r",
							"        pm.expect(+resp[e]).to.equal(100*count[i])\r",
							"    })\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "4* Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1)  Преобразовать задания 8 - 13 (проверить что в json имеется нужный параметр) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 2) ** Преобразовать задания 14 - 18 (проверить что параметр равен salary умножить на коэффициент) таким образом, чтобы все проверки делались в цикле (1 проверка в цикле, в которую попадают нужные параметры). Название теста должно видоизменяться исходя из подаваемых данных. ( ${}  или другим способом)\r",
							"// 3) *** Преобразовать описанные выше задания 1 и 2 для данного эндпоинта в ОДИН ЦИКЛ, в котором будут проходить ОБА теста.\r",
							"let arr = []\r",
							"const resp = pm.response.json()\r",
							"const salary = 100\r",
							"const count = {\r",
							"  'person': '',\r",
							"    'start_qa_salary': 1,\r",
							"    'qa_salary_after_6_months': 2,\r",
							"    'qa_salary_after_12_months': 2.7,\r",
							"    'qa_salary_after_1.5_year': 3.3,\r",
							"    'qa_salary_after_3.5_years': 3.8\r",
							"}\r",
							"for (const key in count) {\r",
							"    pm.test(`response has ${key}`,() => {\r",
							"        pm.expect(resp).to.have.property(key)\r",
							"    })\r",
							"    if (key != 'person'){\r",
							"        pm.test(`${key} = ${salary} * ${count[key]}`,() => {\r",
							"        pm.expect(resp[key]).to.equal(count[key] * salary)\r",
							"    })\r",
							"    }\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}